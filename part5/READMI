1. Створити два потоки, кожен має писати повідомлення в консоль. Використати Thread, Runnable
2. Змініть попередній приклад (Новий клас), щоб переконатися, що обидва потоки друкують свої повідомлення послідовно, щоб вихід був у порядку (synchronized keyword).
3. Створити два потоки з різними пріоритетами.
4. Реалізуйте просту проблему виробник-споживач (producer-consumer problem), використовуючи потоки та спільний буфер.
5. Використати фреймворк Executor для керування пулом потоків і одночасного виконання завдань.
6. Реалізувати сценарій, коли два потоки по черзі друкують парні та непарні числа від 1 до 10 за допомогою wait() і notify().
7. Створити потік, використовуючи Callable і Future, щоб обчислити факториал числа.
8. Прочитати та надрукувати вміст текстового файлу, використовуючи BufferedReader.
9. Записати дані в текстовий файл, використовуючи BufferedWriter.
10. Прочитати CSV файл. Порахувати загальну кількість рядків.
11. Скопіювати вміст одного текстового файлу в інший.
12. Скласти список списків рядків (List<List<String>>) в один список використовуючи flatMap.
13. Використовуючи flatMap розділити список рядків на окремі символи, а потім зібрати їх у єдиний список символів.
14. Використати flatMap для зведення списку об’єктів, що містять вкладені списки - клас студент, у нього вкладений список предметів, які він відвідує (List<String>). Вивести всі предмети, які відвідують всі студенти (List<Student>)
16. Створити загальний (generic) клас, який представлятиме простий контейнер. Контейнер повинен дозволяти вам додавати елемент і отримувати його.
17. Створити загальний (generic) метод, який знаходить максимальний елемент у масиві будь-якого типу. Метод повинен працювати з різними типами даних, такими як цілі числа, подвійні числа та рядки.
18. Створити програму на Java, яка демонструє використання wildcard generics для прийняття та друку елементів зі списку невідомих типів.
